---
import path from 'path';

// Unified Image Component - Consolidates OptimizedImage, ResponsiveImage, and SVGImage
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  priority?: boolean; // Set to true for above-the-fold images
  sizes?: string; // Responsive image sizes
  quality?: number; // Image quality (1-100)
  format?: 'webp' | 'avif' | 'jpeg' | 'png'; // Preferred format
  loading?: 'lazy' | 'eager'; // Loading strategy
  decoding?: 'async' | 'sync' | 'auto'; // Decoding strategy
  caption?: string; // Optional caption for lightbox
  lightbox?: boolean; // Enable lightbox functionality
  responsive?: boolean; // Enable responsive image generation
  svg?: boolean; // Treat as SVG (simplified handling)
}

const {
  src,
  alt,
  width,
  height,
  class: className = "",
  priority = false,
  sizes = "(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw",
  quality = 80,
  format = 'webp',
  loading = priority ? 'eager' : 'lazy',
  decoding = 'async',
  caption,
  lightbox = false,
  responsive = true,
  svg = src.toLowerCase().endsWith('.svg')
} = Astro.props;

// Determine loading strategy
const finalLoading = svg ? 'eager' : loading;
const fetchpriority = priority ? 'high' : 'auto';

// Generate optimized image paths
const baseName = src.replace(/\.[^/.]+$/, ""); // Remove extension
const optimizedSrc = src.includes('/images/optimized/') ? src : src.replace('/images/', '/images/optimized/');
const optimizedSrcLower = optimizedSrc.replace(/\.[^/.]+$/, path.extname(src).toLowerCase());
const webpSrc = optimizedSrcLower.replace(/\.[^/.]+$/, '.webp');

// Generate responsive image sources if responsive is enabled and not SVG
const responsiveSizes = [
  { width: 640, suffix: 'sm' },
  { width: 750, suffix: 'md' },
  { width: 828, suffix: 'lg' },
  { width: 1080, suffix: 'xl' },
  { width: 1200, suffix: '2xl' },
  { width: 1920, suffix: '3xl' }
];

// Generate srcset strings for responsive images
const webpSrcset = responsive && !svg ? responsiveSizes.map(size => 
  `${webpSrc.replace('.webp', `-${size.suffix}.webp`)} ${size.width}w`
).join(', ') : '';

const fallbackSrcset = responsive && !svg ? responsiveSizes.map(size => 
  `${optimizedSrcLower.replace(/\.[^/.]+$/, `-${size.suffix}${path.extname(src).toLowerCase()}`)} ${size.width}w`
).join(', ') : '';

// Determine if we should use picture element for responsive images
const usePicture = responsive && !svg && webpSrcset && fallbackSrcset;
---

{usePicture ? (
  <picture class={`unified-image responsive ${className}`}>
    <!-- WebP format for modern browsers -->
    <source
      type="image/webp"
      srcset={webpSrcset}
      sizes={sizes}
    />
    
    <!-- Fallback optimized original format -->
    <source
      srcset={fallbackSrcset}
      sizes={sizes}
    />
    
    <!-- Fallback for older browsers -->
    <img
      src={optimizedSrcLower}
      alt={alt}
      width={width}
      height={height}
      loading={finalLoading}
      decoding={decoding}
      fetchpriority={fetchpriority}
      style="width: 100%; height: auto; display: block;"
      onload="this.classList.add('lazy-loaded')"
    />
  </picture>
) : (
  <img
    src={svg ? src : optimizedSrc}
    alt={alt}
    width={width}
    height={height}
    class={`unified-image ${svg ? 'svg' : ''} ${className}`}
    loading={finalLoading}
    decoding={decoding}
    fetchpriority={fetchpriority}
    onload="this.classList.add('lazy-loaded')"
  />
)}

{caption && (
  <figcaption class="image-caption">{caption}</figcaption>
)}

{lightbox && (
  <script>
    // Add lightbox functionality if needed
    // This will be handled by the ImageLightbox component
  </script>
)}

<style>
  /* Unified image styles */
  .unified-image {
    max-width: 100%;
    height: auto;
    display: block;
  }

  /* Responsive image styles */
  .unified-image.responsive {
    display: block;
    max-width: 100%;
    height: auto;
  }

  .unified-image.responsive img {
    width: 100%;
    height: auto;
    display: block;
    /* Optimize image rendering */
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
  }

  /* SVG-specific styles */
  .unified-image.svg {
    max-width: 100%;
    height: auto;
    display: block;
  }
  
  /* Ensure SVGs scale properly */
  .unified-image.svg[src*=".svg"] {
    width: 100%;
    height: auto;
  }

  /* Lazy loading effects */
  img[loading="lazy"] {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  img[loading="lazy"].lazy-loaded,
  img[loading="lazy"][src] {
    opacity: 1;
  }

  /* Image caption */
  .image-caption {
    text-align: center;
    font-size: 0.9rem;
    color: var(--text-gray);
    margin-top: 0.5rem;
    font-style: italic;
  }

  /* Loading placeholder */
  .lazy-placeholder {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* Optimize image loading performance */
  .unified-image.responsive {
    contain: layout style paint;
  }
</style>
