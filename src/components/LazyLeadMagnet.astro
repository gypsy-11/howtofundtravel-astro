---
interface Props {
  componentName: string;
  props?: Record<string, any>;
  placeholder?: string;
}

const { componentName, props = {}, placeholder = "Loading..." } = Astro.props;
---

<div id={`lazy-${componentName}`} class="lazy-lead-magnet">
  <div class="placeholder">{placeholder}</div>
</div>

<script>
  // Lazy load component based on component name
  const loadComponent = async (componentName: string, containerId: string, props: Record<string, any>) => {
    try {
      let component;
      
      switch (componentName) {
        case 'VibeNomadsCommunity':
          const vibeModule = await import('../components/lead-magnets/VibeNomadsCommunity.astro');
          component = vibeModule.default;
          break;
        case 'JobSitesBookmarks':
          const jobModule = await import('../components/lead-magnets/JobSitesBookmarks.astro');
          component = jobModule.default;
          break;
        case 'AIToolsBookmarks':
          const aiModule = await import('../components/lead-magnets/AIToolsBookmarks.astro');
          component = aiModule.default;
          break;
        case 'FamilyVisaGuide':
          const visaModule = await import('../components/lead-magnets/FamilyVisaGuide.astro');
          component = visaModule.default;
          break;
        default:
          console.warn(`Unknown component: ${componentName}`);
          return;
      }
      
      // Render the component
      const container = document.getElementById(containerId);
      if (container && component) {
        // Create a temporary element to render the component
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = await component.render(props);
        container.innerHTML = tempDiv.innerHTML;
      }
    } catch (error) {
      console.error(`Error loading component ${componentName}:`, error);
    }
  };

  // Load component when it comes into view
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const container = entry.target;
        const componentName = container.getAttribute('data-component');
        const props = JSON.parse(container.getAttribute('data-props') || '{}');
        
        if (componentName) {
          loadComponent(componentName, container.id, props);
          observer.unobserve(container);
        }
      }
    });
  });

  // Observe all lazy components
  document.querySelectorAll('.lazy-lead-magnet').forEach(el => {
    observer.observe(el);
  });
</script>

<style>
  .lazy-lead-magnet {
    min-height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f8f9fa;
    border-radius: 8px;
    margin: 2rem 0;
  }
  
  .placeholder {
    color: #6c757d;
    font-style: italic;
  }
</style>
