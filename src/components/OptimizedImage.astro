---
// Enhanced Optimized Image Component with lazy loading and optimization
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  priority?: boolean; // Set to true for above-the-fold images
  sizes?: string; // Responsive image sizes
  quality?: number; // Image quality (1-100)
  format?: 'webp' | 'avif' | 'jpeg' | 'png'; // Preferred format
  loading?: 'lazy' | 'eager'; // Loading strategy
  decoding?: 'async' | 'sync' | 'auto'; // Decoding strategy
  caption?: string; // Optional caption for lightbox
  lightbox?: boolean; // Enable lightbox functionality
}

const {
  src,
  alt,
  width,
  height,
  class: className = "",
  priority = false,
  sizes = "(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw",
  quality = 80,
  format = 'webp',
  loading = priority ? 'eager' : 'lazy',
  decoding = 'async',
  caption,
  lightbox = false
} = Astro.props;

// Use optimized image path if available, fallback to original
const optimizedSrc = src.replace('/images/', '/images/optimized/');
// Remove file extension to check if optimized version exists
const baseName = src.replace(/\.(jpg|jpeg|png|webp|avif)$/i, '');
const optimizedBaseName = baseName.replace('/images/', '/images/optimized/');

// Try to find an optimized version with common extensions
const findOptimizedImage = () => {
  const extensions = ['.webp', '.jpg', '.png'];
  for (const ext of extensions) {
    const testPath = optimizedBaseName + ext;
    // For now, we'll use the webp version as default since we know it exists
    if (ext === '.webp') {
      return testPath;
    }
  }
  // Fallback to original image if no optimized version found
  return src;
};

const finalSrc = findOptimizedImage();
---

<img
  src={finalSrc}
  alt={alt}
  width={width}
  height={height}
  class={className}
  loading={loading}
  decoding={decoding}
  onload="this.classList.add('lazy-loaded')"
  onerror="this.onerror=null; this.src=this.src.replace('/images/optimized/', '/images/'); console.log('Optimized image failed, falling back to original:', this.src);"
/>

{lightbox && caption && (
  <script>
    // Add lightbox functionality if needed
    // This will be handled by the ImageLightbox component
  </script>
)}

<style>
  /* Lazy loading effects */
  img[loading="lazy"] {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  img[loading="lazy"].lazy-loaded,
  img[loading="lazy"][src] {
    opacity: 1;
  }

  /* Responsive image styles */
  img {
    max-width: 100%;
    height: auto;
    display: block;
  }

  /* Loading placeholder */
  .lazy-placeholder {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
</style>
