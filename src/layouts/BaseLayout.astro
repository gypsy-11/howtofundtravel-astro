---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/fonts.css';
import '../styles/critical.css';
import '../styles/main.css';
import '../styles/blog.css';

export interface Props {
  title: string;
  description: string;
  image?: string;
  canonical?: string;
  type?: 'website' | 'article';
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
}

const {
  title,
  description,
  image = "/images/optimized/how-to-fund-travel-balloons-hero.webp",
  canonical,
  type = 'website',
  publishedTime,
  modifiedTime,
  author = 'Melissa'
} = Astro.props;

const canonicalUrl = canonical || Astro.url.href;

// Generate structured data based on page type
const generateStructuredData = () => {
  const baseData = {
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": "How to Fund Travel",
    "url": "https://howtofund.travel",
    "logo": "https://howtofund.travel/images/how-to-fund-travel-logo-transparent.svg",
    "description": "Learn how to fund your travel dreams through remote work, online business, and smart investing strategies.",
    "sameAs": [
      "https://www.instagram.com/howtofundtravel",
      "https://www.linkedin.com/in/melissa-howtofundtravel"
    ],
    "founder": {
      "@type": "Person",
      "name": "Melissa",
      "jobTitle": "Digital Nomad & Travel Funding Expert"
    }
  };

  if (type === 'article') {
    return [
      baseData,
      {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": title,
        "description": description,
        "image": new URL(image, Astro.url).href,
        "author": {
          "@type": "Person",
          "name": author
        },
        "publisher": {
          "@type": "Organization",
          "name": "How to Fund Travel",
          "logo": {
            "@type": "ImageObject",
            "url": "https://howtofund.travel/images/how-to-fund-travel-logo-transparent.svg"
          }
        },
        "datePublished": publishedTime,
        "dateModified": modifiedTime || publishedTime,
        "mainEntityOfPage": {
          "@type": "WebPage",
          "@id": canonicalUrl
        }
      }
    ];
  }

  return [baseData];
};

const structuredData = generateStructuredData();
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="canonical" href={canonicalUrl} />
    
    <!-- Structured Data -->
    {structuredData.map((data, index) => (
      <script type="application/ld+json" set:html={JSON.stringify(data)} />
    ))}
    
    <!-- Preload critical resources for LCP optimization -->
    <link rel="preload" href="/images/optimized/ocean-shores-transparency.webp" as="image" fetchpriority="high">
    <link rel="preload" href="/images/how-to-fund-travel-logo-transparent.svg" as="image">
    
    <!-- Preload critical fonts with display=swap -->
    <link rel="preload" href="/fonts/Lemon%20Tuesday.otf" as="font" type="font/otf" crossorigin>
    
    <!-- DNS prefetch for external resources -->
    <link rel="dns-prefetch" href="//www.googletagmanager.com">
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />
    {type === 'article' && publishedTime && (
      <meta property="article:published_time" content={publishedTime} />
    )}
    {type === 'article' && modifiedTime && (
      <meta property="article:modified_time" content={modifiedTime} />
    )}
    {type === 'article' && author && (
      <meta property="article:author" content={author} />
    )}
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url.href} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />
    
    <title>{title}</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/images/how-to-fund-travel-favicon.svg">
    <link rel="icon" type="image/png" href="/images/howtofundtravel-favicon.png">
    <link rel="apple-touch-icon" href="/images/howtofundtravel-favicon.png">
    
    <!-- Load fonts with display=swap for better performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Google Analytics - load asynchronously -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-DPJ8XP3RBD"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-DPJ8XP3RBD');
    </script>
  </head>
  <body>
    <Header />
    
    <main id="main-content">
      <slot />
    </main>
    
    <Footer />
    
    <!-- Load non-critical scripts after page load -->
    <script>
      // Defer non-critical scripts
      window.addEventListener('load', function() {
        // Load main.js after page load
        const script = document.createElement('script');
        script.src = '/js/main.js';
        script.async = true;
        document.body.appendChild(script);
        
        // Load analytics after page load
        const gaScript = document.createElement('script');
        gaScript.src = '/js/add-ga4.js';
        gaScript.async = true;
        document.body.appendChild(gaScript);
      });
      
      // Event handlers will be initialized by individual components
      document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded - event handlers ready');
      });
    </script>
  </body>
</html>

<style>
  /* Non-critical styles loaded after critical CSS */
  /* These styles will be loaded asynchronously */
</style>
