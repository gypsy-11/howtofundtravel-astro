---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

// Get all blog posts
const posts = await getCollection('blog');

// Get all unique tags and their frequencies
const tagFrequency = {};
posts.forEach(post => {
  post.data.tags.forEach(tag => {
    tagFrequency[tag] = (tagFrequency[tag] || 0) + 1;
  });
});

// Sort tags by frequency (most used first)
const sortedTags = Object.entries(tagFrequency)
  .sort(([,a], [,b]) => b - a);

// Group tags by frequency ranges for better organization
const popularTags = sortedTags.filter(([, count]) => count >= 3);
const commonTags = sortedTags.filter(([, count]) => count >= 2 && count < 3);
const otherTags = sortedTags.filter(([, count]) => count === 1);
---

<BaseLayout 
  title="All Tags | How to Fund Travel"
  description="Browse all tags to discover travel funding tips, remote work strategies, AI tools, and digital nomad advice."
  canonical="https://howtofund.travel/blog/tags"
>
  <!-- Tags Hero Section -->
  <section class="tags-hero">
    <div class="container">
      <div class="tags-hero-content">
        <div class="tags-badge">
          <span class="tags-icon">üè∑Ô∏è</span>
          All Tags
        </div>
        <h1>Browse All Tags</h1>
        <p class="tags-description">
          Discover {sortedTags.length} tags across {posts.length} articles to help you fund your travel dreams and build location independence.
        </p>
        <div class="tags-stats">
          <div class="stat">
            <span class="stat-number">{sortedTags.length}</span>
            <span class="stat-label">Tags</span>
          </div>
          <div class="stat">
            <span class="stat-number">{posts.length}</span>
            <span class="stat-label">Articles</span>
          </div>
          <div class="stat">
            <span class="stat-number">{popularTags.length}</span>
            <span class="stat-label">Popular</span>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Popular Tags Section -->
  {popularTags.length > 0 && (
    <section class="tags-section popular-tags">
      <div class="container">
        <div class="section-header">
          <h2>Popular Tags</h2>
          <p>Most frequently used tags across our articles</p>
        </div>
        <div class="tags-grid">
          {popularTags.map(([tag, count]) => (
            <a href={`/blog/tag/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="tag-card popular">
              <div class="tag-content">
                <h3 class="tag-name">{tag}</h3>
                <span class="tag-count">{count} article{count !== 1 ? 's' : ''}</span>
              </div>
              <div class="tag-arrow">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="9,18 15,12 9,6"></polyline>
                </svg>
              </div>
            </a>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Common Tags Section -->
  {commonTags.length > 0 && (
    <section class="tags-section common-tags">
      <div class="container">
        <div class="section-header">
          <h2>Common Tags</h2>
          <p>Tags used in multiple articles</p>
        </div>
        <div class="tags-grid">
          {commonTags.map(([tag, count]) => (
            <a href={`/blog/tag/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="tag-card common">
              <div class="tag-content">
                <h3 class="tag-name">{tag}</h3>
                <span class="tag-count">{count} article{count !== 1 ? 's' : ''}</span>
              </div>
              <div class="tag-arrow">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="9,18 15,12 9,6"></polyline>
                </svg>
              </div>
            </a>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Other Tags Section -->
  {otherTags.length > 0 && (
    <section class="tags-section other-tags">
      <div class="container">
        <div class="section-header">
          <h2>All Other Tags</h2>
          <p>Tags used in individual articles</p>
        </div>
        <div class="tags-grid compact">
          {otherTags.map(([tag, count]) => (
            <a href={`/blog/tag/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="tag-card other">
              <div class="tag-content">
                <h3 class="tag-name">{tag}</h3>
                <span class="tag-count">{count} article</span>
              </div>
              <div class="tag-arrow">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="9,18 15,12 9,6"></polyline>
                </svg>
              </div>
            </a>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Categories Section -->
  <section class="categories-section">
    <div class="container">
      <div class="section-header">
        <h2>Browse by Category</h2>
        <p>Explore content organized by main categories</p>
      </div>
      <div class="categories-grid">
        {(() => {
          // Get all unique categories and their frequencies
          const categoryFrequency = {};
          posts.forEach(post => {
            post.data.category.forEach(cat => {
              categoryFrequency[cat] = (categoryFrequency[cat] || 0) + 1;
            });
          });
          
          return Object.entries(categoryFrequency).map(([category, count]) => (
            <a href={`/blog/category/${category.toLowerCase().replace(/\s+/g, '-')}`} class="category-card">
              <div class="category-content">
                <h3 class="category-name">{category}</h3>
                <span class="category-count">{count} article{count !== 1 ? 's' : ''}</span>
              </div>
              <div class="category-arrow">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="9,18 15,12 9,6"></polyline>
                </svg>
              </div>
            </a>
          ));
        })()}
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  /* Tags Hero Styles */
  .tags-hero {
    background: linear-gradient(135deg, var(--primary-light) 0%, var(--secondary-light) 100%);
    padding: var(--space-xxl) 0;
    text-align: center;
  }
  
  .tags-hero-content {
    max-width: 800px;
    margin: 0 auto;
  }
  
  .tags-badge {
    display: inline-flex;
    align-items: center;
    gap: var(--space-xs);
    background: rgba(255, 255, 255, 0.2);
    color: var(--dark);
    padding: var(--space-xs) var(--space-md);
    border-radius: var(--radius-lg);
    font-size: 0.9rem;
    font-weight: 500;
    margin-bottom: var(--space-lg);
  }
  
  .tags-hero h1 {
    font-size: 3rem;
    color: var(--dark);
    margin-bottom: var(--space-md);
    line-height: 1.2;
  }
  
  .tags-description {
    font-size: 1.2rem;
    color: var(--dark);
    margin-bottom: var(--space-xl);
    line-height: 1.6;
  }
  
  .tags-stats {
    display: flex;
    justify-content: center;
    gap: var(--space-xl);
  }
  
  .stat {
    text-align: center;
  }
  
  .stat-number {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    color: var(--dark);
  }
  
  .stat-label {
    font-size: 0.9rem;
    color: var(--dark);
    opacity: 0.8;
  }
  
  /* Tags Section Styles */
  .tags-section {
    padding: var(--space-xxl) 0;
  }
  
  .tags-section:nth-child(even) {
    background: var(--light-gray);
  }
  
  .section-header {
    text-align: center;
    margin-bottom: var(--space-xl);
  }
  
  .section-header h2 {
    font-size: 2.5rem;
    color: var(--dark);
    margin-bottom: var(--space-md);
  }
  
  .section-header p {
    font-size: 1.1rem;
    color: var(--text-gray);
  }
  
  .tags-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--space-lg);
  }
  
  .tags-grid.compact {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: var(--space-md);
  }
  
  .tag-card {
    background: var(--white);
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    text-decoration: none;
    color: inherit;
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: all 0.3s ease;
    box-shadow: var(--shadow-sm);
    border: 2px solid transparent;
  }
  
  .tag-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }
  
  .tag-card.popular {
    border-color: var(--primary-color);
    background: linear-gradient(135deg, var(--primary-light) 0%, rgba(42, 157, 143, 0.05) 100%);
  }
  
  .tag-card.popular:hover {
    background: var(--primary-color);
    color: var(--white);
  }
  
  .tag-card.common {
    border-color: var(--secondary-color);
    background: linear-gradient(135deg, var(--secondary-light) 0%, rgba(255, 193, 7, 0.05) 100%);
  }
  
  .tag-card.common:hover {
    background: var(--secondary-color);
    color: var(--white);
  }
  
  .tag-card.other {
    border-color: var(--border-color);
  }
  
  .tag-card.other:hover {
    background: var(--primary-color);
    color: var(--white);
    border-color: var(--primary-color);
  }
  
  .tag-content {
    flex: 1;
  }
  
  .tag-name {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: var(--space-xs);
    color: inherit;
  }
  
  .tag-count {
    font-size: 0.9rem;
    opacity: 0.7;
    color: inherit;
  }
  
  .tag-arrow {
    color: inherit;
    opacity: 0.6;
    transition: opacity 0.2s ease;
  }
  
  .tag-card:hover .tag-arrow {
    opacity: 1;
  }
  
  /* Categories Section */
  .categories-section {
    background: var(--dark);
    color: var(--white);
    padding: var(--space-xxl) 0;
  }
  
  .categories-section .section-header h2 {
    color: var(--white);
  }
  
  .categories-section .section-header p {
    color: rgba(255, 255, 255, 0.8);
  }
  
  .categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--space-lg);
  }
  
  .category-card {
    background: rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    text-decoration: none;
    color: var(--white);
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: all 0.3s ease;
    border: 2px solid transparent;
  }
  
  .category-card:hover {
    background: var(--primary-color);
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }
  
  .category-content {
    flex: 1;
  }
  
  .category-name {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: var(--space-xs);
    color: inherit;
  }
  
  .category-count {
    font-size: 0.9rem;
    opacity: 0.7;
    color: inherit;
  }
  
  .category-arrow {
    color: inherit;
    opacity: 0.6;
    transition: opacity 0.2s ease;
  }
  
  .category-card:hover .category-arrow {
    opacity: 1;
  }
  
  /* Mobile Responsive */
  @media (max-width: 768px) {
    .tags-hero h1 {
      font-size: 2.5rem;
    }
    
    .tags-description {
      font-size: 1.1rem;
    }
    
    .tags-stats {
      flex-direction: column;
      gap: var(--space-lg);
    }
    
    .section-header h2 {
      font-size: 2rem;
    }
    
    .tags-grid {
      grid-template-columns: 1fr;
      gap: var(--space-md);
    }
    
    .tags-grid.compact {
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
    
    .categories-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
